// Test to check what's being sent to the LLM\nconst fs = require('fs');\nconst path = require('path');\n\n// Load environment variables\nrequire('dotenv').config({ path: path.resolve(__dirname, '.env.local') });\n\nconsole.log('=== LLM REQUEST INSPECTION TEST ===');\n\n// Test with a simple bio\nconst testBio = \"I love hiking mountains and eating tacos\";\n\nconsole.log('Test bio:', testBio);\n\n// Create the exact prompt that would be sent to the LLM\nconst systemPrompt = `You are a highly experienced dating coach who evaluates dating app bios using a strict but fair scoring system based on proven effectiveness principles.\n\nSCORING STRATEGY (Max 100 points):\n1. CLARITY & PURPOSE (25 points)\n   - Clear communication of who you are\n   - Evidence of self-awareness\n   - Clear intent (looking for what?)\n\n2. ENGAGEMENT FACTORS (25 points)\n   - Conversation starters (questions, stories)\n   - Unique or memorable elements\n   - Hooks that make someone want to swipe right\n\n3. AUTHENTICITY (25 points)\n   - Genuine personality expression\n   - Specific examples over generic statements\n   - Avoidance of clich√©s and overused phrases\n\n4. PRESENTATION (25 points)\n   - Good grammar and spelling\n   - Proper length (not too short or long)\n   - Well-structured with clear flow\n\nSCORING SCALE:\n90-100: Exceptional - Highly likely to generate matches\n75-89: Strong - Good foundation with minor improvements needed\n60-74: Average - Needs significant work to be effective\n45-59: Below Average - Major improvements needed\n30-44: Poor - Unlikely to generate matches\n0-29: Very Poor - Actively hurts chances\n\nCRITICAL SCORING INSTRUCTIONS:\n1. Bios with very little effort (e.g., just \"Hi\", very short generic phrases, or minimal content) should score 0-29\n2. Bios with minimal content but some effort should score 30-44\n3. Base ALL feedback specifically on the user's actual bio content provided below\n4. Reference specific words, phrases, or elements from their actual bio in your feedback\n5. DO NOT make up examples or mention things not in their bio\n6. If their bio is very short, acknowledge that directly and score accordingly\n7. Point out specific strengths by quoting or referencing their actual text\n8. Identify specific areas for improvement based exactly on what they wrote\n9. The recommended bio should be a complete rewrite of their actual bio, not a template\n10. NEVER mention hiking, tacos, karaoke, or other examples unless they are in their actual bio\n\nIMPORTANT: Return your response as a JSON object with this exact structure:\n{\n  \"score\": 75,\n  \"strengths\": [\"strength1\", \"strength2\"],\n  \"improvements\": [\"improvement1\", \"improvement2\"],\n  \"overall\": \"overall feedback text\",\n  \"recommendedBio\": \"recommended bio text\"\n}\n\nThe user's actual bio is provided in the next message. Analyze ONLY that content and return ONLY the JSON object.`;\n\nconst userPrompt = `Here is the dating app bio to analyze:\\n\\n${testBio}`;\n\nconsole.log('\\n=== SYSTEM PROMPT ===');\nconsole.log(systemPrompt);\n\nconsole.log('\\n=== USER PROMPT ===');\nconsole.log(userPrompt);\n\nconsole.log('\\n=== SIMULATING LLM CALL ===');\n\n// Simulate what would happen with a real LLM call\nasync function simulateLLMCall() {\n  try {\n    console.log('Making simulated LLM call...');\n    \n    // This is what the openrouter.ts file would do\n    const requestBody = {\n      model: process.env.OPENROUTER_MODEL || \"openrouter/sonoma-dusk-alpha\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: userPrompt\n        }\n      ],\n      temperature: 0.7,\n      response_format: { type: \"json_object\" }\n    };\n    \n    console.log('\\nRequest body model:', requestBody.model);\n    console.log('Request body messages count:', requestBody.messages.length);\n    \n    // Log the actual bio content being sent\n    console.log('\\nActual bio content in user message:');\n    console.log(requestBody.messages[1].content);\n    \n    // Check if environment variables are loaded\n    console.log('\\nEnvironment variables:');\n    console.log('OPENROUTER_API_KEY present:', !!process.env.OPENROUTER_API_KEY);\n    console.log('OPENROUTER_MODEL:', process.env.OPENROUTER_MODEL || \"default\");\n    \n  } catch (error) {\n    console.error('Error in simulation:', error.message);\n  }\n}\n\nsimulateLLMCall();